# Project: Simple REST API with Express.js

## File: package.json
```json
{
  "name": "express-api",
  "version": "1.0.0",
  "description": "Simple REST API with Express.js",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "morgan": "^1.10.0",
    "uuid": "^9.0.0"
  }
}
```

---

## File: index.js
```javascript
const express = require('express');
const morgan = require('morgan');
const { v4: uuidv4 } = require('uuid');

const app = express();
const port = process.env.PORT || 3000;

// In-memory data store
let items = [];

// Middleware
app.use(morgan('dev'));
app.use(express.json());

// 1. Root route
app.get('/', (req, res) => {
  res.send('Hello, World!');
});

// 2. CRUD routes

// GET /items - Retrieve all items
app.get('/items', (req, res) => {
  res.json(items);
});

// GET /items/:id - Retrieve a single item by ID
app.get('/items/:id', (req, res) => {
  const item = items.find(i => i.id === req.params.id);
  if (!item) {
    return res.status(404).json({ error: 'Item not found' });
  }
  res.json(item);
});

// POST /items - Create a new item
app.post('/items', (req, res) => {
  const { name, description } = req.body;
  if (!name || !description) {
    return res.status(400).json({ error: 'Name and description are required' });
  }
  const newItem = { id: uuidv4(), name, description };
  items.push(newItem);
  res.status(201).json(newItem);
});

// PUT /items/:id - Update an item by ID
app.put('/items/:id', (req, res) => {
  const { name, description } = req.body;
  if (!name || !description) {
    return res.status(400).json({ error: 'Name and description are required' });
  }
  const idx = items.findIndex(i => i.id === req.params.id);
  if (idx === -1) {
    return res.status(404).json({ error: 'Item not found' });
  }
  items[idx] = { id: req.params.id, name, description };
  res.json(items[idx]);
});

// DELETE /items/:id - Delete an item by ID
app.delete('/items/:id', (req, res) => {
  const idx = items.findIndex(i => i.id === req.params.id);
  if (idx === -1) {
    return res.status(404).json({ error: 'Item not found' });
  }
  const deleted = items.splice(idx, 1);
  res.json({ message: 'Item deleted', item: deleted[0] });
});

// 3. 404 handler for unknown routes
app.use((req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// 4. Global error handler
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error' });
});

// Start server
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
```

---

## File: README.md
```markdown
# Simple REST API with Express.js

## Setup

1. **Clone the repo**
   ```bash
   git clone <repo-url>
   cd express-api
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Start the server**
   ```bash
   npm start
   ```
   The API will run at `http://localhost:3000`.

## API Endpoints

- **GET /**
